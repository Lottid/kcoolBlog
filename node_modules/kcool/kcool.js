;(function() {
	window['kcool'] = {};	//把kcool这个命名空间注册到了window上,进行库封装，防止对象污染
	// 保证AMD分模块可用
	if (typeof define !== 'undefined'){
		define([], function () {
			return kcool;
		});
	}
	else if (typeof window !== 'undefined'){
  		// 保证客户端可用
  		if (!window.kcool) {
			window.kcool = kcool;
		}
	}else{
    		// 保证后台可用
    		module.exports = kcool;
  	}
	//对象用于获得当前页面的地址(URL),并把浏览器重定向到新的页面
  	var location = window.location,
	//body是DOM对象里的body子节点，即 <body> 标签；documentElement 是整个节点树的根节点root，即<html> 标签；
	decu= document.documentElement || document.body,
	docReady = document.ready,
	//Navigator 是HTML DOM中的内置对象，它包含有关浏览器的信息。userAgent是Navigator 的属性方法，可返回由客户机发送服务器的 user-agent 头部的值。作用其实就是返回当前用户所使用的是什么浏览器，toLowerCase() 是将获得的信息变成小写
	userAgent = navigator.userAgent.toLowerCase(),
	ua = window.navigator.userAgent.toLowerCase(),
	quirks = document.compatMode === "BackCompat",
	version = (ua.match(/.(?:rv|it|ra|ie)[\/:]([\d.]+)/) || [])[1],
	isOpera = /opera/.test(userAgent),
	isChrome = /chrome/.test(userAgent),
	isWebKit = /webkit/.test(userAgent),
	isIe6 = /msie6.0/.test(userAgent),
	isIe = /msie/.test(userAgent) && !isOpera,
	isSafari = /webkit/.test(userAgent),
	//isSafari = !isChrome && isWebKit,
	isFirefox = /firefox/.test(userAgent);
	//用于提示信息
	var prompt = {
		require: '缺少参数，参数必须的',
		rule: '参数不合法'
	};
	kcool = {
		//工具
		tools: {
			//测试
			G: function () {
				alert("测试");
			},
			//打印全局变量
			globalVariable: function () {
				for (var w in window) {
			    		document.write(window[w]+'<br>');
				}
			},
			//删除左右两端的空格
			trim: function  (a){
				return a.replace(/(^\s*)|(\s*$)/g, "");
				//return a.replace(/^\s*(.*?)\s*$/, '$1');
			},
			//删除左边的空格
		 	ltrim: function  (a){//replace() 方法用于在字符串中用一些字符替换另一些字符,或替换一个与正则表达式匹配的子串
				return a.replace(/(^\s*)/g,"");
			},
			//删除右边的空格
			rtrim: function  (a){
				return a.replace(/(\s*$)/g,"");
			},
			//Json字符串转对象
			parseJSON: function (a) {
				var result = false;
				try {
					result = eval('(' + a + ')');//eval() 函数可计算某个字符串,并执行其中的的 JavaScript 代码
				} catch(e) {};
				return result;
			},
			//取不重复唯一值
			getUid: function () {//getTime()返回一个整数值,这个整数代表了从 1970 年 1 月 1 日开始计算到 Date 对象中的时间之间的毫秒数
				return  "uid" + (newDate()).getTime() + parseInt(Math.random() * 100000);//parseInt() 函数可解析一个字符串,并返回一个整数
			},
			//获取指定范围的随机数
			random: function (a, b) {//Math.floor()返回小于或等于指定数字的最大整数
				return Math.floor(Math.random() * (b - a + 1)) + a;//Math.random()是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机
			},
			//秒转换为毫秒
			sToMs: function (a) {
				var t = a.split(":");//split() 方法用于把一个字符串分割成字符串数组
				return t[0] * 60000 + t[1] * 1000;
			},
			//毫秒转换为秒
			msToS: function (b) {
				return  (b / 60000 + ":" + b / 1000 % 60).replace(/\.\d+/g, "").replace(/(^|:)(\d)(?!\d)/g, "$10$2");
			},
			//数字转化为中文
			numToZh: function (a) {
				return  "零一二三四五六七八九".split("")[a];//split就是将一字符串以特定的字符分割成数组
			},
			dynamicLoad: {
				css: function(path){
					if(!path || path.length === 0){
						throw new Error('argument "path" is required !');
					}
					var head = document.getElementsByTagName('head')[0];
					var link = document.createElement('link');
					link.href = path;
					link.rel = 'stylesheet';
					link.type = 'text/css';
					head.appendChild(link);
				},
				js: function(path){
					if(!path || path.length === 0){
						throw new Error('argument "path" is required !');
					}
					var head = document.getElementsByTagName('head')[0];
					var script = document.createElement('script');
					script.src = path;
					script.type = 'text/javascript';
					head.appendChild(script);
				}
			}
			//动态加载 CSS 文件
			//dynamicLoad.css("test.css");
			//动态加载 JS 文件
			//dynamicLoad.js("test.js");
		},
		cookies: {
			//设置cookie
			setCookie2: function (name,value){
				var Days = 30;
				var exp = new Date();
				exp.setTime(exp.getTime() + Days*24*60*60*1000);
				document.cookie = name + "="+ escape (value) + ";expires=" + exp.toGMTString();
			}
			setCookie3: function (n, v, t) {
				var exp = newDate();
				exp.setTime(exp.getTime() + (t || 24) * 60 * 60 * 1000);
				doc.cookie = n + "=" + escape(v) + ";expires=" + exp.toGMTString() + ';path=/';
			},
			setCookie6: function (sName, sValue, oExpires, sPath, sDomain, bSecure) {
				var sCookie = sName + '=' + encodeURIComponent(sValue);
				if (oExpires) {
					var date = newDate();
					date.setTime(date.getTime() + oExpires * 60 * 60 * 1000);
					sCookie += ';expires=' + date.toUTCString();
				}
				if (sPath) {
					sCookie += ';path=' + sPath;
				}
				if (sDomain) {
					sCookie += ';domain=' + sDomain;
				}
				if (bSecure) {
					sCookie += ';secure';
				}
				d.cookie = sCookie;
			},
			//获取cookie
			getCookie6: function (sName) {
				var sRE = '(?:;)?' + sName + '=([^;]*)';
				var oRE = newRegExp(sRE);
				if (oRE.test(d.cookie)) {
					return decodeURIComponent(RegExp[$1]);//decodeURIComponent()可对encodeURIComponent()函数编码的URI进行解码
				} else {
					return null;
				}
			},
			getCookie2: function (name){
				var arr,reg=new RegExp("(^| )"+name+"=([^;]*)(;|$)");
				if(arr=document.cookie.match(reg)) return unescape(arr[2]);
				else return null;
			}
			removeCookie: function (sName, sPath, sDomain) {
				this.setCookie(sName, '', newDate(0), sPath, sDomain);
			},
			clearAllCookie: function () {
				var cookies = d.cookie.split(";");
				var len = cookies.length;
				for (var i = 0; i < len; i++) {
					var cookie = cookies[i];
					var eqPos = cookie.indexOf("=");
					var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
					name = name.replace(/^\s*|\s*$/, "");
					d.cookie = name + "=;expires=Thu,01Jan197000:00:00GMT;path=/";
				}
			}
		},
	};

	//kcool为自己的库名，把方法注册到了kcool这个对象上
	window['kcool']['tools'] = kcool.tools;
	window['kcool']['assembly'] = kcool.assembly;
}) ();
//测试
//kcool.tools.G();